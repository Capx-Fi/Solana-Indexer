import * as anchor from "@project-serum/anchor";
import {
    Program,
    EventParser
} from "@project-serum/anchor";
import {
    Connection,
    PublicKey,
    clusterApiUrl
} from "@solana/web3.js";
const axios = require('axios');
import { IDL } from "../idls/::::PROGRAM_NAME_ts";
import NodeWallet from "@project-serum/anchor/dist/cjs/nodewallet";

let connection = new Connection("::::CLUSTER_URL","finalized");
let keyPair = anchor.web3.Keypair.generate();
let nodeWallet = new NodeWallet(keyPair);

let provider = new anchor.AnchorProvider(connection, nodeWallet, {commitment: "finalized"});
let program = new Program( IDL , "::::PROGRAM_ID", provider);
let eventParser = new EventParser( new PublicKey("::::PROGRAM_ID"), program.coder);

const sleep = (time: number) => {
    return new Promise((resolve) => setTimeout(resolve, Math.ceil(time * 1000)));
};

// AWS Config
import * as AWS from "aws-sdk";
// Set the region 
AWS.config.update({region: 'us-east-1'});

// Create the DynamoDB service object
var ddb = new AWS.DynamoDB({apiVersion: '2012-08-10'});

async function getBlockDetails(slot:number): Promise<string[]> {
    let logs : string[] = [];
    var params = {
        RequestItems: {
            '::::NETWORK-blocks': {
                Keys:[ 
                    {'slot': {N: slot.toString()}},
                    {'slot': {N: (slot+1).toString()}},
                    {'slot': {N: (slot+2).toString()}},
                    {'slot': {N: (slot+3).toString()}},
                    {'slot': {N: (slot+4).toString()}},
                    {'slot': {N: (slot+5).toString()}},
                    {'slot': {N: (slot+6).toString()}},
                    {'slot': {N: (slot+7).toString()}},
                    {'slot': {N: (slot+8).toString()}},
                    {'slot': {N: (slot+9).toString()}},
                    {'slot': {N: (slot+10).toString()}},
                    {'slot': {N: (slot+11).toString()}},
                    {'slot': {N: (slot+12).toString()}},
                    {'slot': {N: (slot+13).toString()}},
                    {'slot': {N: (slot+14).toString()}},
                    {'slot': {N: (slot+15).toString()}},
                    {'slot': {N: (slot+16).toString()}},
                    {'slot': {N: (slot+17).toString()}},
                    {'slot': {N: (slot+18).toString()}},
                    {'slot': {N: (slot+19).toString()}},
                    {'slot': {N: (slot+20).toString()}},
                ],
            }
        }
    };
    // Call DynamoDB to read the item from the table
    try {
        let data = await ddb.batchGetItem(params).promise();
        data.Responses['::::NETWORK-blocks'].forEach(function(element, index, array) {
            element?.blockLogs.L?.map((log: any) => {
                if (log.S) {
                    logs.push(log.S);
                }
            })
        });
    } catch (error: any) {
        console.log("Error", error);
    }
    return logs;
}

// async function getSlotDetails(_commitment: string, _slot: number): Promise<string[]> {
//     var data = JSON.stringify({
//         "jsonrpc": "2.0",
//         "id": 1,
//         "method": "getBlock",
//         "params": [
//             _slot,
//           {
//             "encoding": "jsonParsed",
//             "transactionDetails": "full",
//             "rewards": false,
//             "commitment": _commitment
//           }
//         ]
//     });
//     var config = {
//         method: 'post',
//         url: "::::CLUSTER_URL",
//         headers: { 
//           'Content-Type': 'application/json'
//         },
//         data : data
//     };
//     return axios(config)
//     .then(function (response: any) {
//         // console.log(response);
//         let logs: string[] = [];
//         response?.data?.result?.transactions.map( async(transaction: any) => {
//             logs.push(transaction?.meta?.logMessages);
//         });
//         logs = logs.join(",").split(",");
//         return logs;
//     })
//     .catch(function (error: any) {
//         console.log(error);
//     });
// }


const getEventObject = async(slot: number) => {
    let flag = true;
    while(flag){
        console.log("Slot",slot);
        let logs = await getBlockDetails(slot);
        // let logs = await getSlotDetails("finalized",slot);
        for (const _event of eventParser.parseLogs(logs)){
            console.log("Event",_event);
            let eventObj = {
                 name : _event.name,
                 params : _event.data
            }
            handleEvents(eventObj)
        }
        slot += 20;
        // await sleep(2);
    }
}

getEventObject(::::START_SLOT);